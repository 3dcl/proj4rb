=Proj4rb
This gem provides Ruby bindings for the Proj Library (https://proj.org). The Proj Library supports converting coordinates
between a number of different coordinate systems and projections.

== Installation
First install the gem in the usual manner:

    gem install proj4rb

Next install the Proj Library. This of course varies per system, but the library is likely called proj4 which is
its old name. Once installed, you'll need to make sure that libproj is installed on your operating system's
load path.

== Usage
To get started first require the gem:

  require 'proj'

=== Crs
Next, create a coordinate system. To create a coordinate system, you can specify are CRS codes, well-known text (WKT) strings
or old-style Proj4 strings (which are deprecated).

    crs1 = Proj::Crs.new('EPSG:4326')

    crs2 = Proj::Crs.new('urn:ogc:def:crs:EPSG::4326')

    crs3 = Proj::Crs.new('+proj=longlat +datum=WGS84 +no_defs +type=crs')

    crs4 = Proj::Crs.new(<<~EOS)
      GEOGCRS["WGS 84",
      DATUM["World Geodetic System 1984",
            ELLIPSOID["WGS 84",6378137,298.257223563,
                      LENGTHUNIT["metre",1]]],
      PRIMEM["Greenwich",0,
             ANGLEUNIT["degree",0.0174532925199433]],
      CS[ellipsoidal,2],
      AXIS["geodetic latitude (Lat)",north,
           ORDER[1],
           ANGLEUNIT["degree",0.0174532925199433]],
      AXIS["geodetic longitude (Lon)",east,
           ORDER[2],
           ANGLEUNIT["degree",0.0174532925199433]],
      USAGE[
          SCOPE["unknown"],
              AREA["World"],
          BBOX[-90,-180,90,180]],
      ID["EPSG",4326]]
    EOS

Notice when using the old-style Proj4 string, the addition of the "+type=crs" value. If you'd like to use old-style
init parameters, then do this:

    crs = Proj::Crs.new('+init=epsg:4326')

Note this usage is deprecated in Proj however.

=== Transformation
After you have created two coordinate systems, you can then create a transformation. For example, if you want to
convert coordinates from the "3-degree Gauss-Kruger zone 3" coordinate system to WGS84 (one version of lat-long)
first create a transformation:

    crs_gk  = Proj::Crs.new('epsg:31467')
    crs_wgs84 = Proj::Crs.new('epsg:4326')
    transform = Proj::Transformation.new(crs_gk, crs_wgs84)

Once you've created the transformation, you can tranform coordinates using either
the +forward+ or +inverse+ methods. The forward transformation looks like this:

    from = Proj::Coordinate.new(x: 5428192.0, y: 3458305.0, z: -5.1790915237)
    to = transform.forward(from)

    assert_in_delta(48.98963932450735, to.x, PRECISION)
    assert_in_delta(8.429263044355544, to.y, PRECISION)
    assert_in_delta(-5.1790915237, to.z, PRECISION)
    assert_in_delta(0, to.t, PRECISION)

While the inverse transformation looks like this:

    from = Proj::Coordinate.new(lam: 48.9906726079, phi: 8.4302123334)
    to = transform.inverse(from)

    assert_in_delta(5428306.389495558, to.x, PRECISION)
    assert_in_delta(3458375.3367194114, to.y, PRECISION)
    assert_in_delta(0, to.z, PRECISION)
    assert_in_delta(0, to.t, PRECISION)

Transformation objects can also be created directly like this:

    transform = Proj::Transformation.new('epsg:31467', 'epsg:4326')

=== Coordinate
Notice in the examples above we are transformation instance of Proj::Coordinate.
Proj::Coordinate consists of up to four double values to represent three directions
plus time. In general you will need to fill out at least the first two values:

    from = Proj::Coordinate.new(x: 5428192.0, y: 3458305.0, z: -5.1790915237)
    from = Proj::Coordinate.new(lam: 48.9906726079, phi: 8.4302123334)

Lam is longitude and phi is latitude.

== Error handling
When an error occurs, a Proj::Error instance will be thrown with the underlying message provided
from the Proj library.

== Finding Proj Files (LIB_PROJ)
Starting with version 6, Proj stores its information (datums, ellipsoids, prime meridians, coordinate systems,
units, etc) in a sqlite file called proj.db. If Proj cannot find its database, then the Ruby bindings will
search for it in some well-known locations. Failing that, the Ruby bindings will raise an exception.
In this case, set the environmental variable PROJ_LIB to point at the folder that contains the proj.db file.
Note PROJ_LIB must be set by whatever launches your Ruby program. The Ruby program itself cannot set this
variable and have it work correctly (at least not on windows).

== Backwards Compatibility
Proj versions 5 and 6 are *very* different than Proj version 4. To ensure backwards compatiblity, the Ruby
bindings still include the older Point and Projection classes. Thus your old code still should correctly. However,
these classes are not documented in this Readme because they will be removed upon the release of Proj 7
which will remove the underlying API's they are dependent upon. So please port your code!

Note that the gem should gracefully degrade (as in newer functionality stops working) depending on if you
are using Proj 6, Proj 5 or Proj 4.

==License
Proj4rb is released under the MIT license.

==Authors
The proj4rb Ruby bindings were started by Guilhem Vellut with most of the code 
written by Jochen Topf.  Charlie Savage ported the code to Windows and added 
the Windows build infrastructure. Later, he updated the code to support
Proj version 5 and 6 and ported the code to use FFI.